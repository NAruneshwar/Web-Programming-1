const mongoCollections = require('../config/mongoCollections.js');
let { ObjectId } = require('mongodb');
const reviews = mongoCollections.reviews;
const bookData = require('./books.js')


// { 
//     _id: ObjectId generated by MongoDB,
//     title: "title of review",
//     reviewer: "name of reviewer",
//     bookBeingReviewed: ID of book that is being reviewed,
//     rating: 4,
//     dateOfReview: "1/1/1930",
//     review: "review will go here"
//   }



const create= async (title, reviewer, bookBeingReviewed, rating, dateOfReview, review )=>{

    if (!title|| typeof(title)!='string') {
      throw 'You must provide a title for the book in string format';
    }
    if(title.trim()=== ""){
      throw 'the given title is empty string please provide a title'
    }
    if (!reviewer|| typeof(reviewer)!='string') {
      throw 'You must provide a title for the book in string format';
    }
    if(reviewer.trim()=== ""){
      throw 'the given title is empty string please provide a title'
    }
    if (!bookBeingReviewed) 
    {
        throw 'You must provide an id to search for';
    }
    if(rating<1 || rating>5){
      throw 'The rating should be in between 1,5';
    }
    if(!Number.isInteger(rating)){
      throw 'given rating is not a whole number'
    }
    if (!review|| typeof(review)!='string') {
      throw 'You must provide a runtime for the movie in string format';
    }
    if(review.trim()=== ""){
      throw 'the given runtime is empty string please provide a runtime'
    }


    let isDateValid = Date.parse(dateOfReview);
    if(isNaN(isDateValid)){
      throw 'Not a Valid Date'
    }

    const reviewsCollect = await reviews();

    let newReview = {
      title,
      reviewer, 
      bookBeingReviewed, 
      rating, 
      dateOfReview, 
      review
    };
    // console.log(newMovie);
    const insertInfo = await reviewsCollect.insertOne(newReview);
    if (insertInfo.insertedCount === 0) throw 'Could not add Book';
    const newId = insertInfo.insertedId;
    await bookData.addReview(bookBeingReviewed,newId);
    return await get(bookBeingReviewed,newId.toString());
  }


const getAll = async(id) =>{
  if (!id) 
  {
    throw 'You must provide an id to search for';
  }
  if(typeof(id)!="string" || id.length!=24){
    throw 'You must only pass in id as string that is 24 charecters long'
  }
  if(id.trim()===""){
    throw 'Id can not be empty spaces'
  }
  var re =  /^[0-9a-fA-F]+$/;
  if(!re.test(id)) {
    throw 'Given Input is not in hexadecimal please verify ID'
  } 
  // console.log(id);

  const reviewsCollect = await reviews();

  const allinfo = await reviewsCollect.find({ "bookBeingReviewed": id}).toArray();
  // console.log(allinfo);
  if(allinfo == null) throw 'No reviews exist with that book ID';

  // for(k in allinfo){
  //   allinfo[k]['_id'] = allinfo[k]['_id'].toString()
  //   // result.add()
  // }
  return allinfo
}



const get = async(bid,rid) =>{
  if (!bid) 
  {
    throw 'You must provide an id to search for';
  }
  if(typeof(bid)!="string" || bid.length!=24){
    throw 'You must only pass in id as string that is 24 charecters long'
  }
  if(bid.trim()===""){
    throw 'Id can not be empty spaces'
  }
  var re =  /^[0-9a-fA-F]+$/;
  if(!re.test(bid)) {
    throw 'Given Input is not in hexadecimal please verify ID'
  } 
  if (!rid) 
  {
    throw 'You must provide an id to search for';
  }
  if(typeof(rid)!="string" || rid.length!=24){
    throw 'You must only pass in id as string that is 24 charecters long'
  }
  if(rid.trim()===""){
    throw 'Id can not be empty spaces'
  }
  var re =  /^[0-9a-fA-F]+$/;
  if(!re.test(rid)) {
    throw 'Given Input is not in hexadecimal please verify ID'
  } 


  const reviewsCollect = await reviews();
  const Info = await reviewsCollect.findOne({$and: [ { _id: ObjectId(rid)}, {"bookBeingReviewed": bid}]});
  if(Info == null) throw 'No reviews exist with that ID';
  
  Info['_id']= Info['_id'].toString()
  return Info
}


const remove = async(bid,rid) => {
  if (!bid) {
    throw 'You must provide an id to search for';
  }
  if(typeof(bid)!="string" || bid.length!=24){
    throw 'You must only pass in id as string that is 24 charecters long'
  }
  if(bid.trim()===""){
    throw 'Id can not be empty spaces'
  }
  var re =  /^[0-9a-fA-F]+$/;
  if(!re.test(bid)) {
    throw 'Given Input is not in hexadecimal please verify ID'
  } 
  await bookData.removeRid(bid,rid);
   // console.log(movietitle)
  const reviewsCollect = await reviews();
  const deletionBook = await reviewsCollect.deleteOne({$and: [ { _id: ObjectId(rid)}, {"bookBeingReviewed": bid}]});
    // console.log(deletionMovie);
    if (deletionBook.deletedCount === 0) {
      throw `Could not delete Movie with id of ${id}`;
    }
    return;
}


const removeAllBReviews = async(bid) =>{
  if (!bid) {
    throw 'You must provide an id to search for';
  }
  if(typeof(bid)!="string" || bid.length!=24){
    throw 'You must only pass in id as string that is 24 charecters long'
  }
  if(bid.trim()===""){
    throw 'Id can not be empty spaces'
  }
  var re =  /^[0-9a-fA-F]+$/;
  if(!re.test(bid)) {
    throw 'Given Input is not in hexadecimal please verify ID'
  } 
  try{
    const reviewsCollect = await reviews();
    const deletionBook = await reviewsCollect.deleteMany({ "bookBeingReviewed": bid});
    return "All reviews that exist deleted successfully"
  }
  catch(e){
    throw 'Error: unable to delete review';
  }
}

module.exports = {
    create,
    getAll,
    get,
    remove,
    removeAllBReviews
};


